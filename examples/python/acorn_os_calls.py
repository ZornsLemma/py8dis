from commands import *
import acorn

def mycom(addr, com):
    blank(addr)
    comment(addr, "*************** Test OSBYTE " + '0x%02x' % com + " ***************", indent=1)


# Load the program to be disassembled into the debugger's memory.
# The md5sum is optional but helps avoid confusion if there are multiple versions
# of the same program.
load(0x1100, "orig/acorn_os_calls.orig", "6502")

# Add labels specific to the Master
acorn.master()

label(0x70, "mem")

# Start tracing instructions.
entry(0x1100)

dict = {
     0: 0x1109,
     1: 0x1126,
     2: 0x113a,
     3: 0x1169,
     4: 0x1186,
     5: 0x11be,
     6: 0x11ff,
     7: 0x1213,
     8: 0x127a,
     9: 0x12d6,
    10: 0x1305,
    11: 0x132b,
    12: 0x1351,
    13: 0x1377,
    14: 0x13dc,
    15: 0x1441,
    16: 0x145c,
    17: 0x1494,
    18: 0x14a6,
    19: 0x14af,
    20: 0x14b8,
    21: 0x150b,
    22: 0x156e,
    23: 0x1573,
    24: 0x1578,
    25: 0x1581,
    0x44: 0x15db,
    0x45: 0x15e2,
    0x6b: 0x15e9,
    0x75: 0x1605,
    0x76: 0x160e,
    0x77: 0x1617,
    0x78: 0x1620,
    0x79: 0x1629,
    0x7a: 0x165f,
    0x7b: 0x166a,
    0x7c: 0x1673,
    0x7d: 0x167e,
    0x7e: 0x1687,
    0x7f: 0x1692,
    0x80: 0x16ad,
    0x81: 0x1768,
    0x82: 0x17c3,
    0x83: 0x17d0,
    0x84: 0x17dd,
    0x85: 0x17ea,
    0x86: 0x183f,
    0x87: 0x184c,
    0x88: 0x1859,
    0x89: 0x1862,
    0x8a: 0x187d,
    0x8b: 0x18e9,
    0x8c: 0x1994,
    0x8d: 0x19b8,
    0x8e: 0x19bd,
    0x8f: 0x19c6,
    0x90: 0x1b83,
    0x91: 0x1bd8,
    0x92: 0x1be5,
    0x93: 0x1bf9,
    0x94: 0x1c19,
    0x95: 0x1c2d,
    0x96: 0x1c4d,
    0x97: 0x1c61,
    0x98: 0x1c81,
    0x99: 0x1cd2,
    0x9a: 0x1cf6,
    0x9b: 0x1d3c,
    0x9c: 0x1d4a,
    0x9d: 0x1d79,
    0x9e: 0x1d94,
    0x9f: 0x1d9d,
    0xa0: 0x1da6,
    0xa1: 0x2426,
    0xa2: 0x25fa,
    0xa3: 0x27d7,
    0xa4: 0x27e0,
    0xa5: 0x27e9,
    0xa6: 0x27f6 + 0x1a*0,
    0xa7: 0x27f6 + 0x1a*1,
    0xa8: 0x27f6 + 0x1a*2,
    0xa9: 0x27f6 + 0x1a*3,
    0xaa: 0x27f6 + 0x1a*4,
    0xab: 0x27f6 + 0x1a*5,
    0xac: 0x27f6 + 0x1a*6,
    0xad: 0x27f6 + 0x1a*7,
    0xae: 0x27f6 + 0x1a*8,
    0xaf: 0x27f6 + 0x1a*9,
    0xb0: 0x27f6 + 0x1a*10,
    0xb1: 0x27f6 + 0x1a*11,
    0xb2: 0x27f6 + 0x1a*12,
    0xb3: 0x27f6 + 0x1a*13,
    0xb4: 0x27f6 + 0x1a*14,
    0xb5: 0x27f6 + 0x1a*15,
    0xb6: 0x27f6 + 0x1a*16,
    0xb7: 0x27f6 + 0x1a*17,
    0xb8: 0x27f6 + 0x1a*18,
    0xb9: 0x27f6 + 0x1a*19,
    0xba: 0x27f6 + 0x1a*20,
    0xbb: 0x27f6 + 0x1a*21,
    0xbc: 0x27f6 + 0x1a*22,
    0xbd: 0x27f6 + 0x1a*23,
    0xbe: 0x27f6 + 0x1a*24,
    0xbf: 0x27f6 + 0x1a*25,
    0xc0: 0x27f6 + 0x1a*26,
    0xc1: 0x27f6 + 0x1a*27,
    0xc2: 0x27f6 + 0x1a*28,
    0xc3: 0x27f6 + 0x1a*29,
    0xc4: 0x27f6 + 0x1a*30,
    0xc5: 0x27f6 + 0x1a*31,
    0xc6: 0x27f6 + 0x1a*32,
    0xc7: 0x27f6 + 0x1a*33,
    0xc8: 0x27f6 + 0x1a*34,
    0xc9: 0x27f6 + 0x1a*35,
    0xca: 0x27f6 + 0x1a*36,
    0xcb: 0x27f6 + 0x1a*37,
    0xcc: 0x27f6 + 0x1a*38,
    0xcd: 0x27f6 + 0x1a*39,
    0xce: 0x27f6 + 0x1a*40,
    0xcf: 0x27f6 + 0x1a*41,
    0xd0: 0x27f6 + 0x1a*42,
    0xd1: 0x27f6 + 0x1a*43,
    0xd2: 0x27f6 + 0x1a*44,
    0xd3: 0x27f6 + 0x1a*45,
    0xd4: 0x27f6 + 0x1a*46,
    0xd5: 0x27f6 + 0x1a*47,
    0xd6: 0x27f6 + 0x1a*48,
    0xd7: 0x27f6 + 0x1a*49,
    0xd8: 0x27f6 + 0x1a*50,
    0xd9: 0x27f6 + 0x1a*51,
    0xda: 0x27f6 + 0x1a*52,
    0xdb: 0x27f6 + 0x1a*53,
    0xdc: 0x27f6 + 0x1a*54,
    0xdd: 0x27f6 + 0x1a*55,
    0xde: 0x27f6 + 0x1a*56,
    0xdf: 0x27f6 + 0x1a*57,
    0xe0: 0x27f6 + 0x1a*58,
    0xe1: 0x27f6 + 0x1a*59,
    0xe2: 0x27f6 + 0x1a*60,
    0xe3: 0x27f6 + 0x1a*61,
    0xe4: 0x27f6 + 0x1a*62,
    0xe5: 0x27f6 + 0x1a*63,
    0xe6: 0x27f6 + 0x1a*64,
    0xe7: 0x27f6 + 0x1a*65,
    0xe8: 0x27f6 + 0x1a*66,
    0xe9: 0x27f6 + 0x1a*67,
    0xea: 0x27f6 + 0x1a*68,
    0xeb: 0x27f6 + 0x1a*69,
    0xec: 0x27f6 + 0x1a*70,
    0xed: 0x27f6 + 0x1a*71,
    0xee: 0x27f6 + 0x1a*72,
    0xef: 0x27f6 + 0x1a*73,
    0xf0: 0x27f6 + 0x1a*74,
    0xf1: 0x27f6 + 0x1a*75,
    0xf2: 0x27f6 + 0x1a*76,
    0xf3: 0x27f6 + 0x1a*77,
    0xf4: 0x27f6 + 0x1a*78,
    0xf5: 0x27f6 + 0x1a*79,
    0xf6: 0x27f6 + 0x1a*80,
    0xf7: 0x27f6 + 0x1a*81,
    0xf8: 0x27f6 + 0x1a*82,
    0xf9: 0x27f6 + 0x1a*83,
    0xfa: 0x27f6 + 0x1a*84,
    0xfb: 0x27f6 + 0x1a*85,
    0xfc: 0x27f6 + 0x1a*86,
    0xfd: 0x27f6 + 0x1a*87,
    0xfe: 0x27f6 + 0x1a*88,
    0xff: 0x27f6 + 0x1a*89,
}

label(0x1be5, "buffer_empty")

for entry in dict:
    mycom(dict[entry], entry)

comment(0x3123, "OSWORD")
comment(0x31b3, "Misc other calls")

for i in range(0,5):
    byte(0x4000+i)

for i in range(0,8):
    byte(0x40a3+i)
    byte(0x40d1+i)

for i in range(0,13):
    byte(0x411d+i)
    byte(0x412a+i)

label(0x4000, "osword0block")
label(0x4005, "input_buffer")
label(0x4085, "osword1block")
label(0x408a, "osword2block")
label(0x408f, "osword3block")
label(0x4094, "osword4block")
label(0x4099, "osword5block")
label(0x409e, "osword6block")
label(0x40a3, "osword7block")
label(0x40ab, "osword8block")
label(0x40b9, "osword9block")
label(0x40be, "osword10block")
label(0x40c7, "osword11block")
label(0x40cc, "osword12block")
label(0x40d1, "osword13block")
label(0x40d9, "osword14block")
label(0x40f1, "osword15block")
label(0x4109, "osword122block")
label(0x4121, "osword125block")
label(0x4139, "osword126block")
label(0x4151, "osword127block")
label(0x4169, "osword128block")
label(0x4181, "osword255block")
label(0x41ad, "osgbpb_block")
label(0x41ba, "osgbpb8_block")
label(0x41c7, "osfind_block")
label(0x4199, "osfile_block")


# Use all the information provided to actually disassemble the program.
go()
