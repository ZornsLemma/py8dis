#########################################################################################
#
# Chuckie Egg disassembler
#
# Based on labels, constants and comments from RTW's disassembly of Chuckie Egg:
#       https://stardot.org.uk/forums/viewtopic.php?p=220229#p220229
#
#########################################################################################

from collections import OrderedDict

from commands import *
import acorn

config.set_label_references(False)
config.set_hex_dump(True)
config.set_show_autogenerated_labels(False)
config.set_show_cpu_state(False)
config.set_show_char_literals(False)
config.set_show_all_labels(False)

load(0x1100, "orig/chuckie.orig", "6502")

# Add labels specific to the BBC Micro
acorn.bbc()

label_dict = {}

global_skip = 1
line_break = "----------------------------------------------------------------------------------"

def mylabel(addr, name):
    label(addr, name)
    label_dict[addr] = name

def get_label(addr):
    return label_dict[addr]

def ldxy(addr):
    test_addr = memory[addr+1] + 256 * memory[addr+3]
    lab = get_label(test_addr)
    expr(addr + 1, make_lo(lab))
    expr(addr + 3, make_hi(lab))

def label_skip(addr):
    global global_skip
    mylabel(addr, "skip" + str(global_skip))
    global_skip = global_skip + 1

def comment_lined(addr, comm):
    formatted_comment(addr, line_break + "\n" + comm + "\n" + line_break)

def label_with_comment(addr, lab, comm):
    comment_lined(addr, comm)
    mylabel(addr, lab)

def hex_block(addr, bytes_per_line, lines):
    hexadecimal(addr, bytes_per_line * lines)
    for y in range(0, lines):
        byte(addr, bytes_per_line, bytes_per_line)
        addr += bytes_per_line

def picture_sprite(addr, label, width, height):
    mylabel(addr, label)
    bytes_per_line = (width + 7) // 8
    byte(addr, height * bytes_per_line, bytes_per_line)

    picture_binary(addr, height * bytes_per_line)


def sound_block(addr, lab):
    mylabel(addr, lab)
    word(addr, 1)
    mylabel(addr + 2, lab + "_envelope")
    word(addr + 2, 1)
    mylabel(addr + 4, lab + "_pitch")
    word(addr + 4, 1)
    mylabel(addr + 6, lab + "_length")
    word(addr + 6, 1)

def level_data(addr, index):
    lab = "map" + str(index)
    formatted_comment(addr, "\n" + line_break + "\nMap " + str(index) + " Data\n" + line_break)
    byte(addr, 5)
    expr(addr,     "((" + lab + "platform_end - " + lab + "platform_start) / 3)")
    expr(addr + 1, "((" + lab + "ladder_end - "   + lab + "ladder_start) / 3)")
    expr(addr + 3, "((" + lab + "seed_end - "   + lab + "seed_start) / 2)")
    platform_count = memory[addr]
    ladder_count = memory[addr + 1]
    has_lifts = memory[addr + 2]
    seed_count = memory[addr + 3]
    bird_count = memory[addr + 4]
    mylabel(addr, lab + "data")
    addr += 5
    comment(addr, "Platform data (Y, startX, endX)")
    mylabel(addr, lab + "platform_start")
    byte(addr, platform_count * 3, 3)
    decimal(addr, platform_count * 3)
    addr += platform_count * 3
    mylabel(addr, lab + "platform_end")

    comment(addr, "Ladder data (X, bottom Y, top Y)")
    mylabel(addr, lab + "ladder_start")
    byte(addr, ladder_count*3, 3)
    decimal(addr, ladder_count*3)
    addr += ladder_count*3
    mylabel(addr, lab + "ladder_end")

    if (has_lifts):
        comment(addr, "Lift X")
        addr += 1


    mylabel(addr, lab + "eggs_start")
    comment(addr, "Data for 12 eggs (X, Y)")
    byte(addr, 24, 2)
    decimal(addr, 24)
    addr += 24
    mylabel(addr, lab + "eggs_end")

    comment(addr, "Seed data (X, Y)")
    mylabel(addr, lab + "seed_start")
    byte(addr, seed_count*2, 2)
    decimal(addr, seed_count*2)
    addr += seed_count*2
    mylabel(addr, lab + "seed_end")

    mylabel(addr, lab + "bird_data")
    comment(addr, "Bird data (X, Y)")
    byte(addr, 5*2, 2)
    decimal(addr, 5*2)
    addr += 5*2
    return addr

def declare_stringn(addr, lab):
    byte(addr)
    length = memory[addr]
    start_str = lab + "_start"
    end_str = lab + "_end"
    expr(addr, end_str + " - " + start_str)
    mylabel(addr, lab)
    mylabel(addr + 1, start_str)
    mylabel(addr + 1 + length, end_str)
    decimal(addr + 1, length)

def my_label_maker(d):
    # This example replaces any instances of one label name with another,
    # when found between a range of binary addresses.
    if d.in_range(0x0900, 0x0ab1):
        d.replace("keys", "keycounter")
        d.replace("score", "disallowedkeytab")
        d.replace("read", "keytranstab")
        d.replace("temp1", "internalkeynum")
        d.replace("temp2", "inkeynum")
        d.replace("temp4", "keyrownum")
        d.replace("temp5", "keycolumnnum")
        d.replace("temp6", "numrowclashes")
        d.replace("temp7", "numcolumnclashes")
    elif d.in_range(0x1a26, 0x1a3a):
        d.replace("write", "string")
        d.replace("write + 1", "string + 1")
    elif d.in_range(0x2733, 0x2734):
        d.replace("birddata", "birdpixelx")
    elif d.in_range(0x277c, 0x293e):
        d.replace("read", "hiscoreaddr")
        d.replace("read + 1", "hiscoreaddr + 1")

set_label_maker_hook(my_label_maker)

move(0x0900, 0x3000, 0x1100 - 0x0900)

# Zero page
mylabel(0x0000, "intervaltimerblock")
mylabel(0x0001, "intervaltimerblock + 1")
mylabel(0x001B, "savesp")
mylabel(0x001C, "stalltime")
mylabel(0x001D, "time")
mylabel(0x001E, "time + 1")
mylabel(0x001F, "time + 2")
mylabel(0x0020, "lives")
mylabel(0x0024, "playerlevel")
mylabel(0x0028, "score")
mylabel(0x0030, "bigbirdxpos")
mylabel(0x0031, "bigbirdypos")
mylabel(0x0032, "bigbirdxspeed")
mylabel(0x0033, "bigbirdyspeed")
mylabel(0x0034, "bigbirdanim")
mylabel(0x0035, "bigbirdflag")
mylabel(0x0036, "currentbirdindex")
mylabel(0x0037, "birdwalkingspeed")
mylabel(0x0038, "updatetimer")
mylabel(0x0039, "numeggsleft")
mylabel(0x003A, "bonus")
mylabel(0x003B, "bonus + 1")
mylabel(0x003C, "bonus + 2")
mylabel(0x003D, "bonusexpiredflag")
mylabel(0x003E, "extralifeflag")
mylabel(0x003F, "currentscorexpos")
mylabel(0x0040, "playerx")
mylabel(0x0041, "playery")
mylabel(0x0042, "playercharx")
mylabel(0x0043, "playerchary")
mylabel(0x0044, "playerfracx")
mylabel(0x0045, "playerfracy")
mylabel(0x0046, "movementx")
mylabel(0x0047, "movementy")
mylabel(0x0048, "playerspritenum")
mylabel(0x0049, "movementtype")
mylabel(0x004A, "jumpfalldist")
mylabel(0x004B, "jumpdir")
mylabel(0x004C, "playerfacingdir")
mylabel(0x004D, "difficulty")
mylabel(0x004E, "playerdataoffset")
mylabel(0x004F, "playerdieflag")
mylabel(0x0050, "level")
mylabel(0x0051, "mapdataptr")
mylabel(0x0052, "mapdataptr + 1")
mylabel(0x0053, "numplatforms")
mylabel(0x0054, "numladders")
mylabel(0x0055, "liftflag")
mylabel(0x0056, "numseeds")
mylabel(0x0057, "numbirds")
mylabel(0x0058, "liftx")
mylabel(0x0059, "lift1y")
mylabel(0x005A, "lift2y")
mylabel(0x005B, "whichlift")
mylabel(0x005C, "screen")
mylabel(0x005D, "playernum")
mylabel(0x005E, "numplayers")
mylabel(0x005F, "numaliveplayers")
mylabel(0x0060, "keys")
mylabel(0x0061, "keynum_right")
mylabel(0x0062, "keynum_left")
mylabel(0x0063, "keynum_down")
mylabel(0x0064, "keynum_up")
mylabel(0x0065, "keynum_jump")
mylabel(0x0066, "rndseed")
mylabel(0x0067, "rndseed + 1")
mylabel(0x0068, "rndseed + 2")
mylabel(0x0069, "rndseed + 3")
mylabel(0x0070, "write")
mylabel(0x0071, "write + 1")
mylabel(0x0072, "spriteline")
mylabel(0x0073, "spritecolumn")
mylabel(0x0074, "spritetemp")
mylabel(0x0075, "stringlength")
mylabel(0x0076, "read")
mylabel(0x0077, "read + 1")
mylabel(0x0078, "spriteheight")
mylabel(0x0079, "spritewidthpixels")
mylabel(0x007A, "spritewidth")
mylabel(0x007F, "spritecolour")
mylabel(0x0080, "keybit")
mylabel(0x0081, "columncounter")
mylabel(0x0082, "pixelvalue")
mylabel(0x0083, "pixelbitcounter")
mylabel(0x0084, "spritebyte")
mylabel(0x0087, "widthcounter")
mylabel(0x0088, "temp1")
mylabel(0x0089, "temp2")
mylabel(0x008A, "temp3")
mylabel(0x008B, "temp4")
mylabel(0x008C, "temp5")
mylabel(0x008D, "temp6")
mylabel(0x008E, "temp7")

# Memory locations
mylabel(0x0400, "birddata")
mylabel(0x0400, "birdpixelx")
mylabel(0x0405, "birdpixely")
mylabel(0x040A, "birdcharx")
mylabel(0x040F, "birdchary")
mylabel(0x0414, "birdstatus")
mylabel(0x0419, "birdanim")
mylabel(0x041E, "birddir")
mylabel(0x0430, "hiscoretab")
mylabel(0x0500, "playerscore")
mylabel(0x0508, "playerbonus")
mylabel(0x0509, "playerbonus + 1")
mylabel(0x050A, "playerbonus + 2")
mylabel(0x050B, "playerbonusexpiredflag")
mylabel(0x0510, "collectedeggsflags")
mylabel(0x0520, "collectedseedflags")
mylabel(0x0600, "mapdata")
mylabel(0x0700, "mapdata + $0100")
label_with_comment(0x0900, "showkeys", "Show the currently defined keys on screen")
label_with_comment(0x0903, "choosekeys", "Let the player select their preferred keys")
#comment(0x0903, "Print \"KEY SELECTION\" string")
comment(0x090a, "Read address of keyboard translation table and store in (&76)")
comment(0x0917, "Make note of how many keys have so far been defined")
label_with_comment(0x095C, "waitforkey", "Wait for the player to press a key that hasn't yet been chosen, and print its name")
mylabel(0x096B, "didntpressshift")
mylabel(0x097A, "didntpressctrl")
mylabel(0x0983, "gotakey")
mylabel(0x099C, "checkkeyclashes")
mylabel(0x09AD, "notsamerow")
mylabel(0x09B8, "notsamecolumn")
mylabel(0x09D4, "keyok")
mylabel(0x09DC, "printkeyname_core")
mylabel(0x09EB, "notshift")
mylabel(0x09F2, "notshiftorctrl")
mylabel(0x0A10, "keywithspecialname")
mylabel(0x0A1B, "nottab")
mylabel(0x0A26, "notcapslock")
mylabel(0x0A31, "notshiftlock")
mylabel(0x0A3C, "notescape")
mylabel(0x0A47, "notspace")
mylabel(0x0A52, "notdelete")
mylabel(0x0A5D, "notreturn")
mylabel(0x0A68, "notcopy")
mylabel(0x0A73, "notleftarrow")
mylabel(0x0A7E, "notrightarrow")
mylabel(0x0A89, "notdownarrow")
mylabel(0x0A94, "notuparrow")
mylabel(0x0AAC, "printstringandreturninkey")
mylabel(0x0AAF, "returninkey")
declare_stringn(0x0AB2, "string_keyselection")
comment_lined(0xab2, "Key-related strings")
declare_stringn(0x0ADC, "string_up")
declare_stringn(0x0AE9, "string_down")
declare_stringn(0x0AF8, "string_left")
declare_stringn(0x0B07, "string_right")
declare_stringn(0x0B17, "string_jump")
declare_stringn(0x0B26, "string_tab")
declare_stringn(0x0B2A, "string_capslock")
declare_stringn(0x0B34, "string_shiftlock")
declare_stringn(0x0B3F, "string_escape")
declare_stringn(0x0B46, "string_space")
declare_stringn(0x0B4C, "string_delete")
declare_stringn(0x0B53, "string_return")
declare_stringn(0x0B5A, "string_copy")
declare_stringn(0x0B5F, "string_leftarrow")
declare_stringn(0x0B6A, "string_rightarrow")
declare_stringn(0x0B76, "string_downarrow")
declare_stringn(0x0B81, "string_uparrow")
declare_stringn(0x0B8A, "string_shift")
declare_stringn(0x0B90, "string_control")
label_with_comment(0x0B98, "showkeys_core", "Show the currently defined keys on screen")
label_with_comment(0x0BF0, "printkeyname", "Print the name of the key whose INKEY code is in A")
comment_lined(0x0bf8, "Other key-related strings")
declare_stringn(0x0BF8, "string_keys")
declare_stringn(0x0C09, "string_holdabort")
label_with_comment(0x0C38, "domovementsound", "Make movement sounds")
mylabel(0x0C3F, "ismoving")
mylabel(0x0C46, "domovementsound2")
mylabel(0x0C4F, "notmovinghorizontally")
mylabel(0x0C58, "notmovingvertically")
mylabel(0x0C6C, "jumpingupsound")
mylabel(0x0C76, "notjumpingsound")
mylabel(0x0C84, "notfallingsound")
mylabel(0x0C89, "movingonlift")
label_with_comment(0x0C8B, "playsoundblip", "Play sound blip (movement sounds)\nA = pitch to play")
sound_block(0x0C98, "blipsoundblock")
sound_block(0x0CA0, "deathsoundblock")
sound_block(0x0CA8, "eggsoundblock")
sound_block(0x0CB0, "bonussoundblock")
mylabel(0x0CB8, "unused2")
label_with_comment(0x0CC0, "mapptrs", "Map data pointers")
pc = 0x0CC0
for i in range(0,8):
    expr(pc, "map" + str(i) + "data")
    word(pc, 1)
    pc += 2

addr = 0x0cd0
addr = level_data(addr, 0)
addr = level_data(addr, 1)
addr = level_data(addr, 2)
addr = level_data(addr, 3)
addr = level_data(addr, 4)
addr = level_data(addr, 5)
addr = level_data(addr, 6)
addr = level_data(addr, 7)

mylabel(0x10F8, "unused3")
label_with_comment(0x1200, "sprite_platform", "Sprite data")
picture_sprite(0x1200, "sprite_platform", 8, 8)
picture_sprite(0x1208, "sprite_ladder", 8, 8)
picture_sprite(0x1210, "sprite_egg", 8, 8)
picture_sprite(0x1218, "sprite_seed", 8, 8)
picture_sprite(0x1220, "sprite_lift"     , 16, 4  )
picture_sprite(0x1228, "sprite_manright1", 8 , 16 )
picture_sprite(0x1238, "sprite_manright2", 8 , 16 )
picture_sprite(0x1248, "sprite_manright3", 8 , 16 )
picture_sprite(0x1258, "sprite_manleft1", 8 , 16 )
picture_sprite(0x1268, "sprite_manleft2", 8 , 16 )
picture_sprite(0x1278, "sprite_manleft3", 8 , 16 )
picture_sprite(0x1288, "sprite_manupdown1", 8 , 16 )
picture_sprite(0x1298, "sprite_manupdown2", 8 , 18 )
picture_sprite(0x12AA, "sprite_manupdown3", 8 , 18 )
picture_sprite(0x12BC, "sprite_bigbirdright1", 16, 24 )
picture_sprite(0x12EC, "sprite_bigbirdright2", 16, 24 )
picture_sprite(0x131C, "sprite_bigbirdleft1", 16, 24 )
picture_sprite(0x134C, "sprite_bigbirdleft2", 16, 24 )
picture_sprite(0x137C, "sprite_cagewithhole", 24, 48 )
picture_sprite(0x140C, "sprite_cage", 24, 48 )
picture_sprite(0x149C, "sprite_birdright1", 8 , 20 )
picture_sprite(0x14B0, "sprite_birdright2", 8 , 20 )
picture_sprite(0x14C4, "sprite_birdleft1", 8 , 20 )
picture_sprite(0x14D8, "sprite_birdleft2", 8 , 20 )
picture_sprite(0x14EC, "sprite_birdupdown1", 8 , 20 )
picture_sprite(0x1500, "sprite_birdupdown2", 8 , 22 )
picture_sprite(0x1516, "sprite_birdeatright1", 16, 20 )
picture_sprite(0x153E, "sprite_birdeatright2", 16, 20 )
picture_sprite(0x1566, "sprite_birdeatleft1", 16, 20 )
picture_sprite(0x158E, "sprite_birdeatleft2", 16, 20 )
picture_sprite(0x15B6, "sprite_digit0", 8, 7   )
picture_sprite(0x15BD, "sprite_digit1", 8, 7   )
picture_sprite(0x15C4, "sprite_digit2", 8, 7   )
picture_sprite(0x15CB, "sprite_digit3", 8, 7   )
picture_sprite(0x15D2, "sprite_digit4", 8, 7   )
picture_sprite(0x15D9, "sprite_digit5", 8, 7   )
picture_sprite(0x15E0, "sprite_digit6", 8, 7   )
picture_sprite(0x15E7, "sprite_digit7", 8, 7   )
picture_sprite(0x15EE, "sprite_digit8", 8, 7   )
picture_sprite(0x15F5, "sprite_digit9", 8, 7   )
picture_sprite(0x15FC, "sprite_score", 24, 9  )
picture_sprite(0x1617, "sprite_highlightbox", 32, 9  )
picture_sprite(0x163B, "sprite_player", 32, 9  )
picture_sprite(0x165F, "sprite_level", 40, 9  )
picture_sprite(0x168C, "sprite_bonus", 48, 9  )
picture_sprite(0x16C2, "sprite_time", 40, 9  )
picture_sprite(0x16EF, "sprite_life", 8, 3   )
picture_sprite(0x16F2, "sprite_bigc", 16, 30 )
picture_sprite(0x172E, "sprite_bigh", 16, 30 )
picture_sprite(0x176A, "sprite_bigu", 16, 30 )
picture_sprite(0x17A6, "sprite_bigk", 16, 30 )
picture_sprite(0x17E2, "sprite_bigi", 16, 30 )
picture_sprite(0x181E, "sprite_bige", 16, 30 )
picture_sprite(0x185A, "sprite_bigg", 16, 30 )
mylabel(0x1896, "unused4")
#picture_binary(0x1200, 0x1896 - 0x1200)
#hexadecimal(0x1200, 0x1896 - 0x1200)
decimal(0x1896, 0x1902 - 0x1896)
label_with_comment(0x1902, "plotsprite", "Plot sprite" +
    "\n" +
    "\n (read,x)        = sprite data" +
    "\n (write),y       = screen address" +
    "\n spriteline      = line within character row of sprite, 0-7" +
    "\n spritecolumn    = 0 or 1 for the pixel of the Mode 2 byte" +
    "\n spritewidth     = width of sprite data in bytes (multiples of 8 pixels)" +
    "\n spriteheight    = height of sprite in pixels" +
    "\n spritecolour    = byte which would set leftmost Mode 2 pixel in the desired colour\n")
mylabel(0x191C, "rotatecolourloop")
mylabel(0x1920, "dontrotatecolour")
mylabel(0x192B, "plotpixelloop")
mylabel(0x1935, "pixelclear")
label_skip(0x193f)
mylabel(0x194B, "morebitsleft")
mylabel(0x1961, "spritedonerow")
mylabel(0x196B, "plotspriteexit")
label_with_comment(0x196C, "spritegotonextrow", "Sets screen address / line to next row")
mylabel(0x1977, "movetonextcharrow")
label_with_comment(0x1987, "calcscrnaddr", "Calculate screen address from position in X, Y" +
    "\n" +
    "\nReturns:" +
    "\n    (write)          = screen address" +
    "\n    spriteline       = line within character row" +
    "\n    spritecolumn     = column 0 or 1\n")
label_with_comment(0x19DB, "getspritedata", "Get sprite data of sprite A into spritewidth, spriteheight and (read)")
label_with_comment(0x1A0C, "plotspriteatcharpos", "Plot sprite A at character block X, Y")
label_with_comment(0x1A26, "printstring", "Print string at address YYXX" +
    "\n" +
    "\n	?YYXX = string length")
mylabel(0x1A30, "printstringloop")
label_with_comment(0x1A3B, "handlekeyboard", "Handle keyboard input")
comment(0x1a3b, "Check the H key pressed (pause)", align=Align.BEFORE_LINE, indent=1)
comment(0x1a48, "Check the H key still pressed (pause)", align=Align.BEFORE_LINE, indent=1)
mylabel(0x1A48, "paused")
mylabel(0x1A67, "stillpaused")
mylabel(0x1A6E, "checkkeys")
label_with_comment(0x1A90, "checkkey", "Check if key X is pressed, and OR ?keybit into keys bitfield if so")
mylabel(0x1AA1, "keynotpressed")
label_with_comment(0x1AA4, "rnd", "Generate a random number")
label_with_comment(0x1AB5, "addscore", "Add A * 10^X to score")
mylabel(0x1AC4, "dontawardextralife")
mylabel(0x1AD6, "nomorecarry")
label_with_comment(0x1AD8, "updatedigit", "Update digit X of score to A (Y = old digit)")
mylabel(0x1ADD, "updatedigit2")
mylabel(0x1AE6, "add5timesxloop")
label_with_comment(0x1B01, "displaydigit", "Display digit A at X,Y")
label_with_comment(0x1B10, "framedelay", "Frame delay")
mylabel(0x1B23, "finisheddelay")
label_with_comment(0x1B33, "initmap", "Initialise map (build and display map)")
mylabel(0x1B67, "clearmaploop")
mylabel(0x1B7A, "putplatformsloop")
mylabel(0x1B90, "putplatformloop")
mylabel(0x1BB0, "putladdersloop")
mylabel(0x1BC6, "putladderloop")
mylabel(0x1BDE, "blankmapblock")
mylabel(0x1C0A, "noliftonthismap")
mylabel(0x1C18, "puteggsloop")
mylabel(0x1C47, "alreadycollectedegg")
mylabel(0x1C5D, "putseedloop")
mylabel(0x1C8A, "alreadycollectedseed")
mylabel(0x1CA6, "birdincage")
mylabel(0x1CB1, "putbirdsloop")
label_with_comment(0x1CC3, "drawtopstatus", "Draw top status")
mylabel(0x1CDB, "getplayerstatusxloop")
mylabel(0x1CF5, "drawplayerscorelivesloop")
mylabel(0x1D43, "get10sloop")
mylabel(0x1D4E, "got10s")
mylabel(0x1D53, "get100sloop")
mylabel(0x1D5E, "got100s")
mylabel(0x1D6D, "lessthanlevel100")
label_with_comment(0x1DEF, "drawplayerscorelives", "Draw player X's score and lives")
mylabel(0x1DF2, "mulby34")
mylabel(0x1E16, "showscoreloop")

label_skip(0x1e3f)
mylabel(0x1E45, "showlivesloop")
mylabel(0x1E62, "nolivestodraw")
label_with_comment(0x1E63, "handleplayercontrols", "Handle player controls")
mylabel(0x1E70, "rightnotpressed")
mylabel(0x1E75, "leftnotpressed")
mylabel(0x1E7A, "downnotpressed")
mylabel(0x1E7F, "upnotpressed")
mylabel(0x1E8C, "notjumping")
mylabel(0x1E91, "notclimbing")
mylabel(0x1E98, "notfalling")
label_with_comment(0x1E9B, "onplatform", "Player on platform")
mylabel(0x1EA4, "nottryingjump")
mylabel(0x1EB2, "attemptclimbup")
mylabel(0x1EC1, "attemptclimbdown")
mylabel(0x1ECD, "doclimb")
mylabel(0x1ED8, "nottryingclimb")
label_skip(0x1ee8)
label_skip(0x1eed)
mylabel(0x1F05, "fallofftotheright")
mylabel(0x1F08, "fallofftotheleft")
mylabel(0x1F10, "notfallingoffplatform")
mylabel(0x1F19, "platformmove")
mylabel(0x1F1F, "playernotmoving")
label_with_comment(0x1F22, "climbing", "Player climbing")
mylabel(0x1F2B, "nottryingtojump2")
mylabel(0x1F4A, "normalclimbing")
mylabel(0x1F5A, "climbingup")
mylabel(0x1F6C, "climbingdown")
mylabel(0x1F7A, "laddermove")
label_with_comment(0x1F81, "jumping", "Player jumping")
mylabel(0x1FAD, "notjumpedtotopofscreen")
mylabel(0x1FBC, "trycatchladderpressingup")
mylabel(0x1FDB, "catchladderpressingup")
mylabel(0x1FEA, "alreadyalignedok1")
mylabel(0x1FED, "trycatchladderpressingdown")
mylabel(0x2013, "alreadyalignedok2")
mylabel(0x2016, "notcatchingladdermidjump")
mylabel(0x201F, "jumpbelowyboundary")
mylabel(0x2039, "jumponyboundary")
mylabel(0x204C, "jumpaboveyboundary")
mylabel(0x2062, "checkjumponlift")
mylabel(0x208F, "hitlift1")
mylabel(0x2096, "adjustlift1pos")
mylabel(0x2099, "checklift2")
mylabel(0x20A5, "hitlift2")
mylabel(0x20AC, "moveupwithlift")
mylabel(0x20BF, "nolifttolandon")
mylabel(0x20CD, "jumpmove")
label_with_comment(0x20D0, "attemptjump", "Player attempting to jump")
mylabel(0x20E0, "jumpkeepcurrentdir")
label_with_comment(0x20E3, "falling", "Player falling")
mylabel(0x20F6, "fallstraightdown")
label_skip(0x2104)
mylabel(0x2108, "fallingmain")
mylabel(0x2111, "fallingbelowyboundary")
mylabel(0x212B, "fallingonyboundary")
mylabel(0x213B, "fallingmove")
label_with_comment(0x213E, "onlift", "Player on lift")
mylabel(0x2147, "notjumpingfromlift")
mylabel(0x2156, "playermovedofflift")
mylabel(0x2160, "playerstillonlift")
mylabel(0x216A, "notmovingonlift")
mylabel(0x2173, "dontimpedemovementonlift")
label_with_comment(0x217B, "moveplayer", "MOVE THE PLAYER")
label_skip(0x2190)
label_skip(0x2196)
label_skip(0x21aa)
mylabel(0x21BE, "playerrightanim")
mylabel(0x21C6, "playerupdownanim")
mylabel(0x21CD, "calcplayeranim")
mylabel(0x21D8, "first2frames")
mylabel(0x21E7, "animnotclimbing")
mylabel(0x21ED, "makeplayeranim")
label_skip(0x2240)
mylabel(0x2248, "hitseed")
mylabel(0x2275, "exitplayermove")
label_with_comment(0x2276, "tryhorizontalmovement", "Check whether player can move horizontally in the direction of movementx" +
    "\nReturns C clear if ok")
mylabel(0x227E, "tryleftmovement")
mylabel(0x22A4, "trylefttestblockabove")
mylabel(0x22A5, "trylefttestblock")
mylabel(0x22BD, "tryrightmovement")
mylabel(0x22E3, "tryrighttestblockabove")
mylabel(0x22E4, "tryrighttestblock")
mylabel(0x22FA, "horizmovesucceeded")
mylabel(0x22FC, "horizmovefailed")
label_with_comment(0x22FE, "removeegg", "Unplots an egg")
label_with_comment(0x2311, "removeseed", "Unplots seed")
label_with_comment(0x2324, "plotplayer", "Plots player, frame A")
label_with_comment(0x2336, "plotbigbird", "Plots big bird, frame A")
label_with_comment(0x234B, "plotbird", "Plots bird")
mylabel(0x236D, "noteatingtoleft")
label_with_comment(0x2374, "movelift", "Moves a lift (different one each call)")
mylabel(0x2380, "movelift1")
mylabel(0x23A3, "liftstillonscreen")
mylabel(0x23BD, "updatelift1")
mylabel(0x23C1, "togglelift")
mylabel(0x23C7, "exitmovelift")
label_with_comment(0x23C8, "getmapblock", "Get map block at X,Y into A")
mylabel(0x23D5, "readmapdatalo")
mylabel(0x23D9, "readmapdatahi")
mylabel(0x23DD, "offscreen")
label_with_comment(0x23E0, "setmapblock", "Sets map block at X,Y to A")
mylabel(0x23E5, "writemapdatalo")
mylabel(0x23E9, "writemapdatahi")
label_with_comment(0x23ED, "calcmapaddr", "Calculates map data address of block X,Y" +
    "\nReturns offset in 256*C+X" +
    "\nPreserves A")
mylabel(0x2404, "exitwithcset")
label_with_comment(0x2407, "updatebirds", "Update birds")
mylabel(0x2416, "dontmovebigbird")
label_skip(0x241d)
label_with_comment(0x2420, "movebigbird", "Update big bird")
mylabel(0x2433, "movebigbirdright")
label_skip(0x243d)
mylabel(0x2444, "movebigbirdleft")
label_skip(0x244e)
mylabel(0x2452, "movebigbirdvertically")
mylabel(0x245B, "movebigbirdup")
label_skip(0x2465)
mylabel(0x2468, "movebigbirddown")
mylabel(0x2472, "bigbirdbounce")
mylabel(0x2483, "dontbounceoffbottom")
mylabel(0x2494, "animatebigbird")
label_with_comment(0x24B5, "movebirds", "Update walking birds")
mylabel(0x24BF, "dontresetbirdindex")
mylabel(0x24C4, "movebird")
mylabel(0x24D0, "birddosomething")
mylabel(0x24D5, "birdwalking")
mylabel(0x24F2, "noplatformtotheleft")
mylabel(0x2505, "noplatformtotheright")
mylabel(0x2517, "noladderbelow")
mylabel(0x252A, "noladderabove")
mylabel(0x253B, "morethanonechoice")
mylabel(0x2549, "birdmovingupdown")
mylabel(0x254B, "birdmovingleftright")
mylabel(0x2560, "stillmorethanonechoice")
mylabel(0x2564, "tryrandomdirectionloop")
mylabel(0x257B, "birdgotdirection")
mylabel(0x2593, "newbirddirright")
mylabel(0x259B, "birdmovedhorizontally")
mylabel(0x25A9, "countsetbits")
mylabel(0x25AD, "countsetbitsloop")
label_skip(0x25b1)
mylabel(0x25B6, "birdeatingseed")
mylabel(0x25D0, "foundseedpos")
mylabel(0x25EF, "animatebird")
mylabel(0x2607, "animatebirddown")
mylabel(0x2618, "animatebirddown2")
mylabel(0x261D, "animatebirdup")
mylabel(0x262E, "animatebirdup2")
mylabel(0x2633, "animatebirdleft")
mylabel(0x2644, "animatebirdleft2")
mylabel(0x2649, "animatebirdright")
mylabel(0x265A, "animatebirdright2")
mylabel(0x265F, "animatebird2")
mylabel(0x2675, "animatebirdeating")
mylabel(0x2682, "finishedeating")
mylabel(0x268C, "eatingright")
mylabel(0x2696, "eatingsecondframe")
label_with_comment(0x269D, "decreasetime", "Decrease the timer")
mylabel(0x26A8, "dodecreasetime")
mylabel(0x26AC, "decreasetimeloop")
mylabel(0x26BA, "timenocarry")
mylabel(0x26CE, "timenotzero")
mylabel(0x26D7, "decreasebonus")
mylabel(0x26DC, "dodecreasebonus")
mylabel(0x26E0, "decreasebonusloop")
mylabel(0x26EE, "bonusnocarry")
mylabel(0x2701, "exitdecreasebonus")
label_with_comment(0x2702, "showtimedigit", "Show a digit of the time remaining (temp1 = which digit)")
label_with_comment(0x2715, "showbonusdigit", "Show a digit of the bonus (temp1 = which digit)")
label_with_comment(0x2728, "checkcollisions", "Collision detection routines")
mylabel(0x2730, "checkcollisionbirdloop")
mylabel(0x2750, "birdnotcollided")
mylabel(0x2758, "checkcollisionbigbird")
mylabel(0x277B, "exitcheckcollisions")
label_with_comment(0x277C, "gethiscoreaddr", "High score routines - find high score entry X" +
    "\nAddress returned in (hiscoreaddr)")
label_with_comment(0x2796, "resethiscoretab", "Reset all hiscores to 1000 \"A&F\"")
mylabel(0x279A, "resethiscoretabloop")
mylabel(0x27A3, "clearhiscorenameloop")
char(0x27a2)
char(0x27ab)
#char(0x27b0)
expr(0x27b0, "char_ampersand")
char(0x27b5)
mylabel(0x27BB, "clearhiscoreloop")
label_with_comment(0x27CB, "checknewhiscore", "Check if we have a new high score, and insert it into the correct place" +
    "\nin the high score table")
mylabel(0x27CF, "checknewhiscoreloop")
mylabel(0x27D6, "comparescoreloop")
mylabel(0x27E4, "checknexthiscore")
mylabel(0x27ED, "inserthiscore")
mylabel(0x27F2, "inserthiscoreloop")
char(0x27fd)
mylabel(0x27FE, "insertblanknameloop")
label_with_comment(0x2806, "shufflehiscores", "Shuffle high scores down from entry temp3 to make gap")
mylabel(0x280A, "shuffleloop")
mylabel(0x2815, "readhiscoreloop")
mylabel(0x2825, "writehiscoreloop")
mylabel(0x2832, "shuffled")
label_with_comment(0x2838, "showhiscores", "Show high scores")
mylabel(0x284D, "showhiscoresloop")
char(0x2855)
char(0x285f)
mylabel(0x2864, "nothiscore10")
mylabel(0x2878, "hiscoredigitsloop")
char(0x2881)
char(0x286b)
char(0x2887)
char(0x2893)
mylabel(0x2885, "printhighscoredigit")
mylabel(0x288A, "printhighscorechar")
mylabel(0x2897, "hiscorenameloop")
mylabel(0x28BD, "showhiscoresend")
label_with_comment(0x28BE, "updatehiscoretab", "Enter player's score into high score table if required")
mylabel(0x28C8, "gethiscorename")
mylabel(0x28DC, "positionpromptloop")
mylabel(0x28F0, "promptpositioned")
mylabel(0x2930, "copynewhiscorenameloop")
mylabel(0x293E, "exitgethiscorename")
comment_lined(0x293f, "High score related strings")
declare_stringn(0x293F, "string_highscores")
declare_stringn(0x2957, "string_hiscorepos")
mylabel(0x295C, "hiscoreypos")
mylabel(0x295D, "hiscoreypos + 1")
declare_stringn(0x295E, "string_hiscoreprompt")
mylabel(0x2966, "promptypos")
mylabel(0x2967, "promptypos + 1")
declare_stringn(0x2969, "string_enteryourname")
mylabel(0x299a, "hiscorenamebuffer-8")
mylabel(0x299D, "osword0block")
word(0x299D)
byte(0x299f)
byte(0x29a0)
mylabel(0x29A2, "hiscorenamebuffer")
mylabel(0x29AB, "hiscorenamebuffer_end")

comment_lined(0x29ab, "Entry point (only entered once at beginning of game)")
entry(0x29AB, "entrypoint")

label_with_comment(0x29AE, "start", "Beginning of the game lifecycle - the title page")
label_with_comment(0x29B4, "restartplayer", "Player starting their turn")
label_with_comment(0x29CF, "startnewlevel", "Start a new level")
label_with_comment(0x29DD, "mainloop", "Main loop")
label_with_comment(0x2A0A, "levelcomplete", "Comes here when screen is completed")
mylabel(0x2A0E, "awardbonusloop")
mylabel(0x2A23, "playbonussound")
mylabel(0x2A2C, "dontplaybonussound")
mylabel(0x2A30, "nobonustoaward")
label_with_comment(0x2A3E, "playerdead", "Comes here when player dies")
label_with_comment(0x2A7A, "nextplayersturn", "Move to next player")
label_with_comment(0x2A91, "allplayersdead", "Everyone is dead; return to the very beginning of the gameflow")
comment_lined(0x2a94, "Gameflow related strings")
mylabel(0x2A94, "string_gameover")
mylabel(0x2A95, "string_gameover_start")
mylabel(0x2AB2, "string_gameover_end")
mylabel(0x2AB2, "string_getready")
mylabel(0x2AB3, "string_getready_start")
mylabel(0x2AC9, "string_getready_end")
mylabel(0x2AC9, "string_playerN")
mylabel(0x2ACA, "string_playerN_start")
mylabel(0x2AD7, "string_playerN_end")
label_with_comment(0x2AD7, "initialise", "One-time initialisation, e.g. copy code to low memory, set screen mode, etc" +
    "\nThis has to change location eventually")
mylabel(0x2AE2, "copyloop")
mylabel(0x2B5F, "initpalette")
mylabel(0x2B76, "string_vdu19")
mylabel(0x2B77, "string_vdu19_start")
decimal(0x2B77)
mylabel(0x2B78, "string_vdu19_start + 1")
mylabel(0x2b79, "string_vdu19_start + 2")
mylabel(0x2B7D, "string_vdu19_end")
mylabel(0x2B7D, "palettedata")
label_with_comment(0x2B8D, "choosenumplayers", "Prompt for number of players")
mylabel(0x2B9C, "inputnumplayers")
mylabel(0x2BAE, "not1player")
mylabel(0x2BC0, "not2player")
mylabel(0x2BD2, "not3player")
mylabel(0x2BE4, "not4player")
label_with_comment(0x2BF1, "startgame", "Start game; A = number of players")
label_with_comment(0x2C00, "initallplayers", "Initialise all player data to start of game defaults")
mylabel(0x2C02, "resetplayerdataloop")
mylabel(0x2C11, "resetplayerscores")
mylabel(0x2C1D, "resetplayerscores2")
mylabel(0x2C32, "resetperplayerloop")
mylabel(0x2C44, "string_howmanyplayers")
decimal(0x2C44, 0x2C5E - 0x2C44)
mylabel(0x2C45, "string_howmanyplayers_start")
mylabel(0x2C5E, "string_howmanyplayers_end")
label_with_comment(0x2C5E, "pause", "Pause for A units of time")
mylabel(0x2C60, "pauseloop1")
mylabel(0x2C64, "pauseloop2")
label_with_comment(0x2C6F, "titlepage", "Render and update the title page")
mylabel(0x2C75, "titlepageloop")
mylabel(0x2C87, "titlepagewait1")
mylabel(0x2C95, "titlepagewait2")
mylabel(0x2CAE, "titlepagewait3")
mylabel(0x2CBC, "titlepagewait4")
label_with_comment(0x2CC6, "displayrandomlevel", "Display random level")
label_with_comment(0x2CD8, "initplayersfordemo", "Initialise all 4 players (used by the demo)")
label_with_comment(0x2CE5, "showlogo", "Show Chuckie Egg logo")
label_with_comment(0x2D44, "showkeyhelp", "Show help with keys (S to start, K to change keys)")
declare_stringn(0x2D4C, "string_keyhelp")
label_with_comment(0x2D88, "checktitlepagekeys_core", "Check title page keys")
mylabel(0x2D99, "didntpressS")
mylabel(0x2DA7, "pressedK")
mylabel(0x2DB0, "checktitlepagekeys")
mylabel(0x2DB7, "checktitlepagekeysdelay")
label_with_comment(0x2DBE, "showbigletter", "Show big logo letter")
label_with_comment(0x2DCA, "initlevel", "Initialise level data (speed, number of birds, etc)")
mylabel(0x2DE1, "nobigbirdyet")
mylabel(0x2DF3, "birdsnotfastyet")
label_with_comment(0x2E08, "initplayerleveldata", "Initialise the per-player data for a new level")
mylabel(0x2E1C, "capto9")
mylabel(0x2E2C, "clearcollectedflags")
label_with_comment(0x2E37, "restoreplayerdata", "Restore current player score, bonus and level from backup")
mylabel(0x2E49, "restoreplayerdataloop")
mylabel(0x2E59, "restoreplayerdataloop2")
mylabel(0x2E6A, "restoreplayerdataloop3")
label_with_comment(0x2E75, "saveplayerdata", "Save current player score, bonus and level to per-player backup")
mylabel(0x2E7F, "saveplayerdataloop")
mylabel(0x2E8F, "saveplayerdataloop2")
label_with_comment(0x2E9C, "initcharacters", "Initialise player, birds, lifts and render them for the first time")
mylabel(0x2ECE, "initbigbird")
mylabel(0x2EEF, "notphase2")
mylabel(0x2EF7, "notphase1or3")
mylabel(0x2EF7, "initbirdloop")
mylabel(0x2F27, "doneinitbirds")
label_with_comment(0x2F53, "checkextralife", "Check whether an extra life should be awarded")
mylabel(0x2F58, "awardextralife")
label_with_comment(0x2F64, "showlife", "Plot/delete life")
mylabel(0x2F71, "showlife2")
mylabel(0x2F86, "playdeathtune")
mylabel(0x2F92, "playdeathtuneloop")
label_with_comment(0x2FB0, "deathtunedata", "Death tune data")
mylabel(0x2FB1, "deathtune_start")
byte(0x2FB1, 0x2FD1-0x2FB1, 2)
decimal(0x2FB1, 0x2FD1 - 0x2FB1)
mylabel(0x2FD1, "deathtune_end")
label_with_comment(0x2FD1, "envelope1", "Envelope data")
hex_block(0x2fd1, 14, 3)
mylabel(0x2FDF, "envelope2")
mylabel(0x2FED, "envelope3")
mylabel(0x3000, "codemain_end")
mylabel(0x3000, "relocated_code")
mylabel(0x3000, "relocated_code_end")

mylabel(0x3100, "codemain_end+256")
mylabel(0x3200, "codemain_end+512")
mylabel(0x3300, "codemain_end+768")
mylabel(0x3400, "codemain_end+1024")
mylabel(0x3500, "codemain_end+1280")
mylabel(0x3600, "codemain_end+1536")
mylabel(0x3700, "codemain_end+1792")
mylabel(0x0a00, "showkeys+$0100")
mylabel(0x0b00, "showkeys+$0200")
mylabel(0x0c00, "showkeys+$0300")
mylabel(0x0d00, "showkeys+$0400")
mylabel(0x0e00, "showkeys+$0500")
mylabel(0x0f00, "showkeys+$0600")
mylabel(0x1000, "showkeys+$0700")

ldxy(0x283c)
ldxy(0x284d)
ldxy(0x28f0)
ldxy(0x2902)
ldxy(0x29b4)
ldxy(0x29bb)
ldxy(0x2a4e)
ldxy(0x2a55)
ldxy(0x2b6a)
ldxy(0x2b8d)
ldxy(0x2d44)
ldxy(0x0903)
ldxy(0x091f)
ldxy(0x092b)
ldxy(0x0937)
ldxy(0x0943)
ldxy(0x094f)
ldxy(0x09e4)
ldxy(0x09eb)
ldxy(0x0a14)
ldxy(0x0a1f)
ldxy(0x0a2a)
ldxy(0x0a35)
ldxy(0x0a40)
ldxy(0x0a4b)
ldxy(0x0a56)
ldxy(0x0a61)
ldxy(0x0a6c)
ldxy(0x0a77)
ldxy(0x0a82)
ldxy(0x0a8d)
ldxy(0x0b98)
ldxy(0x0bb8)
ldxy(0x0bc4)
ldxy(0x0bd0)
ldxy(0x0bdc)
ldxy(0x0be8)

ldxy(0x2a41)

Colour0 = 0                     # Black
Colour1 = 2                     # Yellow
Colour2 = 8                     # Magenta
Colour3 = Colour1 + Colour2     # Green
Colour4 = 32                    # Yellow
Colour5 = Colour4 + Colour1     # Yellow
Colour6 = Colour4 + Colour2     # Yellow
Colour7 = Colour4 + Colour3     # Yellow
Colour8 = 128                   # Cyan
Colour9 = Colour8 + Colour1     # Cyan
Colour10 = Colour8 + Colour2    # Cyan
Colour11 = Colour8 + Colour3    # Cyan
Colour12 = Colour8 + Colour4    # Cyan
Colour13 = Colour8 + Colour5    # Cyan
Colour14 = Colour8 + Colour6    # Cyan
Colour15 = Colour8 + Colour7    # Cyan

EggColour      = Colour1
LiftColour     = Colour1
LadderColour   = Colour2
SeedColour     = Colour2
PlatformColour = Colour3
CageColour     = Colour4
PlayerColour   = Colour4
BigBirdColour  = Colour4
BirdColour     = Colour8

LogoColour = Colour1
DigitsColour = Colour2
StatusColour = Colour2
LivesColour = Colour4

constant(Colour0, "Colour0", format=Format.HEX)
constant(Colour1, "Colour1", format=Format.HEX)
constant(Colour2, "Colour2", format=Format.HEX)
constant(Colour3, "Colour3", format=Format.HEX)
constant(Colour4, "Colour4", format=Format.HEX)
constant(Colour5, "Colour5", format=Format.HEX)
constant(Colour6, "Colour6", format=Format.HEX)
constant(Colour7, "Colour7", format=Format.HEX)
constant(Colour8, "Colour8", format=Format.HEX)
constant(Colour9, "Colour9", format=Format.HEX)
constant(Colour10, "Colour10", format=Format.HEX)
constant(Colour11, "Colour11", format=Format.HEX)
constant(Colour12, "Colour12", format=Format.HEX)
constant(Colour13, "Colour13", format=Format.HEX)
constant(Colour14, "Colour14", format=Format.HEX)
constant(Colour15, "Colour15", format=Format.HEX)

constant('&', "char_ampersand", format=Format.CHAR)

constant(EggColour,      "EggColour", "For the collectable eggs")   # Just to test inline comments
constant(LiftColour,     "LiftColour", "This is the colour of the lift:", align=Align.BEFORE_LINE)  # Just an example to test Align.BEFORE_LINE
constant(LadderColour,   "LadderColour")
constant(SeedColour,     "SeedColour")
constant(PlatformColour, "PlatformColour")
constant(CageColour,     "CageColour")
constant(PlayerColour,   "PlayerColour")
constant(BigBirdColour,  "BigBirdColour")
constant(BirdColour,     "BirdColour")
constant(LogoColour,     "LogoColour")
constant(DigitsColour,   "DigitsColour")
constant(StatusColour,   "StatusColour")
constant(LivesColour,    "LivesColour", "...for the lives displayed in the status area at the top of the screen above the play area below the score if I remember correctly", align=Align.AFTER_LINE)  # Just an example to test Align.AFTER_LINE

constant(1, "MapId_Platform", format=Format.BINARY)
constant(2, "MapId_Ladder", format=Format.BINARY)
constant(4, "MapId_Egg", format=Format.BINARY)
constant(8, "MapId_Seed", format=Format.PICTURE_BINARY)     # Just to test py8dis

sprite_constants = {
    0: "SpriteId_Blank",
    1: "SpriteId_Platform",
    2: "SpriteId_Ladder",
    3: "SpriteId_Egg",
    4: "SpriteId_Seed",
    5: "SpriteId_Lift",
    6: "SpriteId_ManRight1",
    7: "SpriteId_ManRight2",
    8: "SpriteId_ManRight3",
    9: "SpriteId_ManLeft1",
    10: "SpriteId_ManLeft2",
    11: "SpriteId_ManLeft3",
    12: "SpriteId_ManUpDown1",
    13: "SpriteId_ManUpDown2",
    14: "SpriteId_ManUpDown3",
    15: "SpriteId_BigBirdRight1",
    16: "SpriteId_BigBirdRight2",
    17: "SpriteId_BigBirdLeft1",
    18: "SpriteId_BigBirdLeft2",
    19: "SpriteId_CageWithHole",
    20: "SpriteId_Cage",
    21: "SpriteId_BirdRight1",
    22: "SpriteId_BirdRight2",
    23: "SpriteId_BirdLeft1",
    24: "SpriteId_BirdLeft2",
    25: "SpriteId_BirdUpDown1",
    26: "SpriteId_BirdUpDown2",
    27: "SpriteId_BirdEatRight1",
    28: "SpriteId_BirdEatRight2",
    29: "SpriteId_BirdEatLeft1",
    30: "SpriteId_BirdEatLeft2",
    31: "SpriteId_Digit0",
    32: "SpriteId_Digit1",
    33: "SpriteId_Digit2",
    34: "SpriteId_Digit3",
    35: "SpriteId_Digit4",
    36: "SpriteId_Digit5",
    37: "SpriteId_Digit6",
    38: "SpriteId_Digit7",
    39: "SpriteId_Digit8",
    40: "SpriteId_Digit9",
    41: "SpriteId_Score",
    42: "SpriteId_HighlightBox",
    43: "SpriteId_Player",
    44: "SpriteId_Level",
    45: "SpriteId_Bonus",
    46: "SpriteId_Time",
    47: "SpriteId_Life",
    48: "SpriteId_BigC",
    49: "SpriteId_BigH",
    50: "SpriteId_BigU",
    51: "SpriteId_BigK",
    52: "SpriteId_BigI",
    53: "SpriteId_BigE",
    54: "SpriteId_BigG",
}

substitute_constants("jsr plotspriteatcharpos", 'a', sprite_constants, True)
substitute_constants("jsr setmapblock", 'a', sprite_constants)
substitute_constants("jsr getspritedata", 'a', sprite_constants)
substitute_constants("jsr showbigletter", 'a', sprite_constants)

expr(0x1ab5, "DigitsColour")
expr(0x1b71, "PlatformColour")
expr(0x1ba9, "LadderColour")
expr(0x1bd0, "PlatformColour")
expr(0x1bd0, "PlatformColour")
expr(0x1bd9, sprite_constants)
expr(0x1bdf, "MapId_Ladder")
expr(0x1c0b, "EggColour")
expr(0x1c34, "MapId_Egg")
expr(0x1c52, "SeedColour")
expr(0x1c79, "MapId_Seed")
expr(0x1c95, "CageColour")
expr(0x1ca0, sprite_constants)
expr(0x1cc4, "StatusColour")
expr(0x1d01, "StatusColour")
label_skip(0x1dca)
expr(0x1dfd, "StatusColour")
expr(0x1e30, "LivesColour")
expr(0x1ebc, "MapId_Ladder")
expr(0x1eca, "MapId_Ladder")
expr(0x1f3c, "MapId_Platform")
expr(0x1f64, "MapId_Ladder")
expr(0x1f75, "MapId_Ladder")
label_skip(0x1f93)
expr(0x1fc5, "MapId_Ladder")
label_skip(0x1fd4)
expr(0x1fd8, "MapId_Ladder")
expr(0x1ff5, "MapId_Ladder")
expr(0x2001, "MapId_Ladder")
expr(0x2028, "MapId_Platform")
expr(0x2042, "MapId_Platform")
expr(0x2058, "MapId_Platform")
expr(0x211a, "MapId_Platform")
expr(0x2134, "MapId_Platform")
label_skip(0x21b0)
expr(0x21b5, sprite_constants)
expr(0x21bd, sprite_constants)
expr(0x21c7, sprite_constants)
label_skip(0x2200)
if is_assembler("xa"):
    expr(0x2208, "(MapId_Egg | MapId_Seed)")
else:
    expr(0x2208, "(MapId_Egg OR MapId_Seed)")
expr(0x220c, "MapId_Seed")
expr(0x22a9, "MapId_Platform")
expr(0x22b8, "MapId_Platform")
expr(0x22e8, "MapId_Platform")
expr(0x22f7, "MapId_Platform")
expr(0x2306, "EggColour")
expr(0x2319, "SeedColour")
expr(0x2325, "PlayerColour")
expr(0x2337, "BigBirdColour")
expr(0x233c, sprite_constants)
expr(0x234c, "BirdColour")
expr(0x2356, sprite_constants)
expr(0x2366, sprite_constants)
expr(0x2383, "LiftColour")
expr(0x24ed, "MapId_Platform")
expr(0x24fc, "MapId_Platform")
expr(0x250e, "MapId_Ladder")
expr(0x2521, "MapId_Ladder")
expr(0x259c, "MapId_Seed")
expr(0x25d8, "MapId_Seed")
expr(0x2619, "SpriteId_BirdUpDown1 - SpriteId_BirdRight1")
expr(0x262f, "SpriteId_BirdUpDown1 - SpriteId_BirdRight1")
expr(0x2645, "SpriteId_BirdLeft1 - SpriteId_BirdRight1")
expr(0x265b, "SpriteId_BirdRight1 - SpriteId_BirdRight1")
expr(0x2681, "SpriteId_BirdEatRight1 - SpriteId_BirdRight1")
expr(0x269e, "DigitsColour")
expr(0x2ce6, "LogoColour")
expr(0x2ead, "LiftColour")
expr(0x2f65, "LivesColour")
expr(0x2921, make_lo("osword0block"))
expr(0x2923, make_hi("osword0block"))

expr(0x091c, "255 - inkey_key_h")
expr(0x1ab6, "DigitsColour")
expr(0x1b08, sprite_constants)
expr(0x1bdb, "LadderColour")
expr(0x1ef4, "MapId_Platform")

expr(0x19e6, make_lo("spritetable"))
expr(0x19ec, make_hi("spritetable"))
expr(0x278c, make_lo("hiscoretab"))
expr(0x2792, make_hi("hiscoretab"))
expr(0x299D, "hiscorenamebuffer")
expr(0x299F, "hiscorenamebuffer_end - hiscorenamebuffer - 1")

# Handle sprites
sprites = OrderedDict()
sprites[0] = "platform"
sprites[8] = "ladder"
sprites[16] = "egg"
sprites[24] = "seed"
sprites[32] = "lift"
sprites[40] = "manright1"
sprites[56] = "manright2"
sprites[72] = "manright3"
sprites[88] = "manleft1"
sprites[104] = "manleft2"
sprites[120] = "manleft3"
sprites[136] = "manupdown1"
sprites[152] = "manupdown2"
sprites[170] = "manupdown3"
sprites[188] = "bigbirdright1"
sprites[236] = "bigbirdright2"
sprites[284] = "bigbirdleft1"
sprites[332] = "bigbirdleft2"
sprites[380] = "cagewithhole"
sprites[524] = "cage"
sprites[668] = "birdright1"
sprites[688] = "birdright2"
sprites[708] = "birdleft1"
sprites[728] = "birdleft2"
sprites[748] = "birdupdown1"
sprites[768] = "birdupdown2"
sprites[790] = "birdeatright1"
sprites[830] = "birdeatright2"
sprites[870] = "birdeatleft1"
sprites[910] = "birdeatleft2"
sprites[950] = "digit0"
sprites[957] = "digit1"
sprites[964] = "digit2"
sprites[971] = "digit3"
sprites[978] = "digit4"
sprites[985] = "digit5"
sprites[992] = "digit6"
sprites[999] = "digit7"
sprites[1006] = "digit8"
sprites[1013] = "digit9"
sprites[1020] = "score"
sprites[1047] = "highlightbox"
sprites[1083] = "player"
sprites[1119] = "level"
sprites[1164] = "bonus"
sprites[1218] = "time"
sprites[1263] = "life"
sprites[1266] = "bigc"
sprites[1326] = "bigh"
sprites[1386] = "bigu"
sprites[1446] = "bigk"
sprites[1506] = "bigi"
sprites[1566] = "bige"
sprites[1626] = "bigg"
sprites[1686] = ""

addr=0x1100
label_with_comment(addr, "spritetable", "Sprite data table - width, height, address")
byte(addr, 2)
decimal(addr, 2)
word(addr + 2)
addr += 4
i = 0
oldOffset = 0
for offset in sprites:
    # Mark the sprite table as bytes and words as needed
    if (sprites[offset] != ""):
        byte(addr, 2)
        decimal(addr, 2)
        word(addr + 2)
        expr(addr + 2, "sprite_" + sprites[offset])
        addr += 4

    # Mark the bytes of each sprite as a 'byte()' section
    #if (i > 0):
    #    length = offset - oldOffset
    #    byte(0x1200 + oldOffset, length)

    oldOffset = offset
    i += 1

mylabel(addr, "unused1")

print("; " + line_break)
print(""";
; Chuckie Egg (the original BBC Micro version)
;
; Disassembled by TobyLobster using the py8dis tool.
; Heavily based on RTW's disassembly of Chuckie Egg:
;     https://stardot.org.uk/forums/viewtopic.php?p=220229#p220229
;""")
print("; " + line_break + "\n")

go()
