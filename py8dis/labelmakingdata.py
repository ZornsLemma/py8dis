from binaryaddrtype import BinaryAddrType

class LabelMakingData:
    def __init__(self,
                 name,
                 defined_as_runtime_addr,
                 defined_in_move_id,
                 binary_addr,
                 binary_addr_type: BinaryAddrType,
                 is_autogenerated,
                 is_expression):
        self.name = name

        # Label definition
        self.defined_as_runtime_addr = defined_as_runtime_addr        # Must have a value
        self.defined_in_move_id      = defined_in_move_id             # Must have a value?
        self.binary_addr_type        = binary_addr_type
        self.binary_addr             = binary_addr

        self.is_autogenerated = is_autogenerated
        self.is_expression    = False

    def in_range(self, start, end):
        """Checks if the label is used within the given binary address range"""
        if self.binary_addr == None:
            return False
        return start <= self.binary_addr < end

    def in_move(self, defined_in_move_id):
        """Checks if the label is defined in the given move"""
        return self.defined_in_move_id == defined_in_move_id

    def replace(self, from_, to):
        """Change the label name from one string ('from_') to another ('to'), or set the label name at the given binary address ('from_') where it is used"""
        if self.name == from_:
            # 'from_' name matched, replace with 'to' name
            self.name = to
            return True
        elif isinstance(from_, int) and (from_ == self.binary_addr) and (self.binary_addr != None):
            # 'from_' address matched the binary address, replace with 'to' name
            self.name = to
            return True
        return False

    def copy(self):
        return LabelMakingData(
            name=self.name,
            defined_as_runtime_addr=self.defined_as_runtime_addr,
            defined_in_move_id=self.defined_in_move_id,
            binary_addr=self.binary_addr,
            binary_addr_type=self.binary_addr_type,
            is_autogenerated=self.is_autogenerated,
            is_expression=self.is_expression
        )

    def __str__(self):
        return "label: {0} at runtime: {1} in move_id: {2} autogenerated:{3} expression:{4}".format(self.name, hex(self.defined_as_runtime_addr), self.defined_in_move_id, self.is_autogenerated, self.is_expression)

    def __repr__(self):
        return self.__str__()
